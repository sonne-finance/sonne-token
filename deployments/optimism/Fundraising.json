{
  "address": "0x5b89789fb230D17c4b0ae1461F26828554F81e5f",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minDepositPerAccount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDepositPerAccount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositEnd",
              "type": "uint256"
            }
          ],
          "internalType": "struct Fundraising.ConstuctorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDepositPerAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositPerAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x661c831c9389d7a1622e08a39bb2c6be2d8f9c4fed94406e68fbd82674627e42",
  "receipt": {
    "to": null,
    "from": "0xFb59Ce8986943163F14C590755b29dB2998F2322",
    "contractAddress": "0x5b89789fb230D17c4b0ae1461F26828554F81e5f",
    "transactionIndex": 0,
    "gasUsed": "469344",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2feb306013f54da08f16892ffcbcab6103ee6cde2915e98e2906b53eb64bb977",
    "transactionHash": "0x661c831c9389d7a1622e08a39bb2c6be2d8f9c4fed94406e68fbd82674627e42",
    "logs": [],
    "blockNumber": 81726234,
    "cumulativeGasUsed": "469344",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x784B82a27029C9E114b521abcC39D02B3D1DEAf2",
      "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
      "50000000000",
      "1000000000",
      "5000000000",
      1679097600,
      1679702400
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "280d8f9673803eb16b85dce5b459f202",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDepositPerAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositPerAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct Fundraising.ConstuctorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositPerAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositPerAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fundraising.sol\":\"Fundraising\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Fundraising.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport './interfaces/IERC20.sol';\\nimport './libraries/SafeMath.sol';\\nimport './libraries/SafeToken.sol';\\n\\ncontract Fundraising {\\n    using SafeToken for address;\\n\\n    struct ConstuctorParams {\\n        address recipient;\\n        address usdc;\\n        uint256 maxTotalDeposit;\\n        uint256 minDepositPerAccount;\\n        uint256 maxDepositPerAccount;\\n        uint256 depositStart;\\n        uint256 depositEnd;\\n    }\\n\\n    event Deposited(\\n        address indexed sender,\\n        uint256 deposit,\\n        uint256 accountDeposit,\\n        uint256 totalDeposit\\n    );\\n\\n    address public immutable recipient;\\n    address public immutable usdc;\\n    uint256 public immutable maxTotalDeposit;\\n    uint256 public immutable minDepositPerAccount;\\n    uint256 public immutable maxDepositPerAccount;\\n    uint256 public immutable depositStart;\\n    uint256 public immutable depositEnd;\\n\\n    mapping(address => uint256) public deposits;\\n    uint256 public totalDeposit;\\n\\n    constructor(ConstuctorParams memory params) {\\n        require(\\n            params.recipient != address(0),\\n            'Fundraising: invalid recipient'\\n        );\\n        require(params.usdc != address(0), 'Fundraising: invalid usdc');\\n        require(\\n            params.depositStart > block.timestamp,\\n            'Fundraising: past deposit start'\\n        );\\n        require(\\n            params.depositEnd > params.depositStart,\\n            'Fundraising: deposit end before deposit start'\\n        );\\n\\n        recipient = params.recipient;\\n        usdc = params.usdc;\\n        maxTotalDeposit = params.maxTotalDeposit;\\n        minDepositPerAccount = params.minDepositPerAccount;\\n        maxDepositPerAccount = params.maxDepositPerAccount;\\n        depositStart = params.depositStart;\\n        depositEnd = params.depositEnd;\\n    }\\n\\n    function deposit(uint256 amount) external {\\n        require(block.timestamp >= depositStart, 'Fundraising: not started');\\n        require(block.timestamp <= depositEnd, 'Fundraising: ended');\\n\\n        // Check account deposit limits\\n        uint256 prevDeposit = deposits[msg.sender];\\n        uint256 newDeposit = prevDeposit + amount;\\n        require(\\n            newDeposit >= minDepositPerAccount,\\n            'Fundraising: min deposit per account'\\n        );\\n        require(\\n            newDeposit <= maxDepositPerAccount,\\n            'Fundraising: max deposit per account'\\n        );\\n\\n        // Check total deposit limits\\n        uint256 newTotalDeposit = totalDeposit + amount;\\n        require(\\n            newTotalDeposit <= maxTotalDeposit,\\n            'Fundraising: max total deposit'\\n        );\\n\\n        // Transfer USDC from sender to recipient\\n        usdc.safeTransferFrom(msg.sender, recipient, amount);\\n\\n        // Update state\\n        deposits[msg.sender] = newDeposit;\\n        totalDeposit = newTotalDeposit;\\n\\n        emit Deposited(msg.sender, amount, newDeposit, newTotalDeposit);\\n    }\\n}\\n\",\"keccak256\":\"0xd0dcffd0d1921f29343cfe3b38b40cfd484fb60e23b7622ae09e58c86f9af9ef\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9d8aa555ba16332bc2fa2890164f2a3212e00cfa45eb24c4a40aa7076f912917\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xde5f9aeade0af65f0bb5360faa681743e75e9692e87ac94389dc40ee28756bbb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SafeToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ninterface ERC20Interface {\\n    function balanceOf(address user) external view returns (uint256);\\n}\\n\\nlibrary SafeToken {\\n    function myBalance(address token) internal view returns (uint256) {\\n        return ERC20Interface(token).balanceOf(address(this));\\n    }\\n\\n    function balanceOf(address token, address user) internal view returns (uint256) {\\n        return ERC20Interface(token).balanceOf(user);\\n    }\\n\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), '!safeApprove');\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), '!safeTransfer');\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), '!safeTransferFrom');\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, '!safeTransferETH');\\n    }\\n}\\n\",\"keccak256\":\"0x1468e397846220330a392e7cacaf9a7863cb4c26ec87b1883cb1c7a962b21a77\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b50604051610a8d380380610a8d8339810160408190526100309161020d565b80516001600160a01b031661008c5760405162461bcd60e51b815260206004820152601e60248201527f46756e6472616973696e673a20696e76616c696420726563697069656e74000060448201526064015b60405180910390fd5b60208101516001600160a01b03166100e65760405162461bcd60e51b815260206004820152601960248201527f46756e6472616973696e673a20696e76616c69642075736463000000000000006044820152606401610083565b428160a00151116101395760405162461bcd60e51b815260206004820152601f60248201527f46756e6472616973696e673a2070617374206465706f736974207374617274006044820152606401610083565b8060a001518160c00151116101a65760405162461bcd60e51b815260206004820152602d60248201527f46756e6472616973696e673a206465706f73697420656e64206265666f72652060448201526c19195c1bdcda5d081cdd185c9d609a1b6064820152608401610083565b80516001600160a01b039081166080908152602083015190911660a0908152604083015160c0908152606084015160e0529183015161010052820151610120520151610140526102aa565b80516001600160a01b038116811461020857600080fd5b919050565b600060e0828403121561021f57600080fd5b60405160e081016001600160401b038111828210171561024f57634e487b7160e01b600052604160045260246000fd5b60405261025b836101f1565b8152610269602084016101f1565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b60805160a05160c05160e05161010051610120516101405161075a6103336000396000818161016f01526102940152600081816101d2015261021f01526000818160ec01526103920152600081816101ab0152610316015260008181610148015261042001526000818160a8015261049b01526000818161012101526104be015261075a6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b6b55f2511610066578063b6b55f2514610191578063ccc529c1146101a6578063d9c146de146101cd578063f6153ccd146101f4578063fc7e286d146101fd57600080fd5b80633e413bee146100a35780635688f789146100e757806366d003ac1461011c57806371a6cab71461014357806399b6f6071461016a575b600080fd5b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100de565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b6101a461019f366004610658565b61021d565b005b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b61010e60015481565b61010e61020b366004610671565b60006020819052908152604090205481565b7f00000000000000000000000000000000000000000000000000000000000000004210156102925760405162461bcd60e51b815260206004820152601860248201527f46756e6472616973696e673a206e6f742073746172746564000000000000000060448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004211156102f75760405162461bcd60e51b8152602060048201526012602482015271119d5b991c985a5cda5b99ce88195b99195960721b6044820152606401610289565b336000908152602081905260408120549061031283836106a1565b90507f00000000000000000000000000000000000000000000000000000000000000008110156103905760405162461bcd60e51b8152602060048201526024808201527f46756e6472616973696e673a206d696e206465706f73697420706572206163636044820152631bdd5b9d60e21b6064820152608401610289565b7f000000000000000000000000000000000000000000000000000000000000000081111561040c5760405162461bcd60e51b8152602060048201526024808201527f46756e6472616973696e673a206d6178206465706f73697420706572206163636044820152631bdd5b9d60e21b6064820152608401610289565b60008360015461041c91906106a1565b90507f000000000000000000000000000000000000000000000000000000000000000081111561048e5760405162461bcd60e51b815260206004820152601e60248201527f46756e6472616973696e673a206d617820746f74616c206465706f73697400006044820152606401610289565b6104e36001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f000000000000000000000000000000000000000000000000000000000000000087610540565b3360008181526020818152604091829020859055600184905581518781529081018590529081018390527f91ede45f04a37a7c170f5c1207df3b6bc748dc1e04ad5e917a241d0f52feada39060600160405180910390a250505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916105a491906106c7565b6000604051808303816000865af19150503d80600081146105e1576040519150601f19603f3d011682016040523d82523d6000602084013e6105e6565b606091505b50915091508180156106105750805115806106105750808060200190518101906106109190610702565b6106505760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b6044820152606401610289565b505050505050565b60006020828403121561066a57600080fd5b5035919050565b60006020828403121561068357600080fd5b81356001600160a01b038116811461069a57600080fd5b9392505050565b600082198211156106c257634e487b7160e01b600052601160045260246000fd5b500190565b6000825160005b818110156106e857602081860181015185830152016106ce565b818111156106f7576000828501525b509190910192915050565b60006020828403121561071457600080fd5b8151801515811461069a57600080fdfea2646970667358221220db22a355e50c8cf4571e3c7985799598998af8c381b60fd3d21b556b868d39f864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b6b55f2511610066578063b6b55f2514610191578063ccc529c1146101a6578063d9c146de146101cd578063f6153ccd146101f4578063fc7e286d146101fd57600080fd5b80633e413bee146100a35780635688f789146100e757806366d003ac1461011c57806371a6cab71461014357806399b6f6071461016a575b600080fd5b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100de565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b6101a461019f366004610658565b61021d565b005b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b61010e7f000000000000000000000000000000000000000000000000000000000000000081565b61010e60015481565b61010e61020b366004610671565b60006020819052908152604090205481565b7f00000000000000000000000000000000000000000000000000000000000000004210156102925760405162461bcd60e51b815260206004820152601860248201527f46756e6472616973696e673a206e6f742073746172746564000000000000000060448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004211156102f75760405162461bcd60e51b8152602060048201526012602482015271119d5b991c985a5cda5b99ce88195b99195960721b6044820152606401610289565b336000908152602081905260408120549061031283836106a1565b90507f00000000000000000000000000000000000000000000000000000000000000008110156103905760405162461bcd60e51b8152602060048201526024808201527f46756e6472616973696e673a206d696e206465706f73697420706572206163636044820152631bdd5b9d60e21b6064820152608401610289565b7f000000000000000000000000000000000000000000000000000000000000000081111561040c5760405162461bcd60e51b8152602060048201526024808201527f46756e6472616973696e673a206d6178206465706f73697420706572206163636044820152631bdd5b9d60e21b6064820152608401610289565b60008360015461041c91906106a1565b90507f000000000000000000000000000000000000000000000000000000000000000081111561048e5760405162461bcd60e51b815260206004820152601e60248201527f46756e6472616973696e673a206d617820746f74616c206465706f73697400006044820152606401610289565b6104e36001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f000000000000000000000000000000000000000000000000000000000000000087610540565b3360008181526020818152604091829020859055600184905581518781529081018590529081018390527f91ede45f04a37a7c170f5c1207df3b6bc748dc1e04ad5e917a241d0f52feada39060600160405180910390a250505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916105a491906106c7565b6000604051808303816000865af19150503d80600081146105e1576040519150601f19603f3d011682016040523d82523d6000602084013e6105e6565b606091505b50915091508180156106105750805115806106105750808060200190518101906106109190610702565b6106505760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b6044820152606401610289565b505050505050565b60006020828403121561066a57600080fd5b5035919050565b60006020828403121561068357600080fd5b81356001600160a01b038116811461069a57600080fd5b9392505050565b600082198211156106c257634e487b7160e01b600052601160045260246000fd5b500190565b6000825160005b818110156106e857602081860181015185830152016106ce565b818111156106f7576000828501525b509190910192915050565b60006020828403121561071457600080fd5b8151801515811461069a57600080fdfea2646970667358221220db22a355e50c8cf4571e3c7985799598998af8c381b60fd3d21b556b868d39f864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1785,
        "contract": "contracts/Fundraising.sol:Fundraising",
        "label": "deposits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1787,
        "contract": "contracts/Fundraising.sol:Fundraising",
        "label": "totalDeposit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}