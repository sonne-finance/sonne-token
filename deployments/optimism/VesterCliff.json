{
  "address": "0xb4bF17210844418F9F2D3B90036E11aa40517971",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sonne_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vestingAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingBegin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingEnd_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingCliff_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "segments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "setRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sonne",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingBegin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingCliff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "vestingCurve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x62c6883a3e89ad8243b2c60eed6092b020a2cda256a33df4f9978918d40e7f04",
  "receipt": {
    "to": null,
    "from": "0xFb59Ce8986943163F14C590755b29dB2998F2322",
    "contractAddress": "0xb4bF17210844418F9F2D3B90036E11aa40517971",
    "transactionIndex": 0,
    "gasUsed": "573364",
    "logsBloom": "0x
    "blockHash": "0xad677fc26861205664748a830fc4dcfa58f8eabaf78de31ce452faa979ccf802",
    "transactionHash": "0x62c6883a3e89ad8243b2c60eed6092b020a2cda256a33df4f9978918d40e7f04",
    "logs": [],
    "blockNumber": 25818670,
    "cumulativeGasUsed": "573364",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1DB2466d9F5e10D7090E7152B68d62703a2245F0",
    "0xFb59Ce8986943163F14C590755b29dB2998F2322",
    "12000000000000000000000000",
    1664409600,
    1727481600,
    1672185600
  ],
  "numDeployments": 1,
  "solcInputHash": "e1e933dd90c2d0d78821c6486450303b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sonne_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBegin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCliff_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"segments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sonne\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingBegin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"vestingCurve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VesterCliff.sol\":\"VesterCliff\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Vester.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport './interfaces/ISonne.sol';\\nimport './interfaces/IClaimable.sol';\\nimport './interfaces/IVester.sol';\\n\\ncontract Vester is IVester, IClaimable {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant override segments = 100;\\n\\n    address public immutable sonne;\\n    address public recipient;\\n\\n    uint256 public immutable override vestingAmount;\\n    uint256 public immutable override vestingBegin;\\n    uint256 public immutable override vestingEnd;\\n\\n    uint256 public previousPoint;\\n    uint256 public immutable finalPoint;\\n\\n    constructor(\\n        address sonne_,\\n        address recipient_,\\n        uint256 vestingAmount_,\\n        uint256 vestingBegin_,\\n        uint256 vestingEnd_\\n    ) {\\n        require(vestingEnd_ > vestingBegin_, 'Vester: END_TOO_EARLY');\\n\\n        sonne = sonne_;\\n        recipient = recipient_;\\n\\n        vestingAmount = vestingAmount_;\\n        vestingBegin = vestingBegin_;\\n        vestingEnd = vestingEnd_;\\n\\n        finalPoint = vestingCurve(1e18);\\n    }\\n\\n    function vestingCurve(uint256 x) public pure virtual returns (uint256 y) {\\n        uint256 speed = 1e18;\\n        for (uint256 i = 0; i < 100e16; i += 1e16) {\\n            if (x < i + 1e16) return y + (speed * (x - i)) / 1e16;\\n            y += speed;\\n            speed = (speed * 976) / 1000;\\n        }\\n    }\\n\\n    function getUnlockedAmount() internal virtual returns (uint256 amount) {\\n        uint256 blockTimestamp = getBlockTimestamp();\\n        uint256 currentPoint = vestingCurve((blockTimestamp - vestingBegin).mul(1e18).div(vestingEnd - vestingBegin));\\n        amount = vestingAmount.mul(currentPoint.sub(previousPoint)).div(finalPoint);\\n        previousPoint = currentPoint;\\n    }\\n\\n    function claim() public virtual override returns (uint256 amount) {\\n        require(msg.sender == recipient, 'Vester: UNAUTHORIZED');\\n        uint256 blockTimestamp = getBlockTimestamp();\\n        if (blockTimestamp < vestingBegin) return 0;\\n        if (blockTimestamp > vestingEnd) {\\n            amount = ISonne(sonne).balanceOf(address(this));\\n        } else {\\n            amount = getUnlockedAmount();\\n        }\\n        if (amount > 0) ISonne(sonne).transfer(recipient, amount);\\n    }\\n\\n    function setRecipient(address recipient_) public virtual {\\n        require(msg.sender == recipient, 'Vester: UNAUTHORIZED');\\n        recipient = recipient_;\\n    }\\n\\n    function getBlockTimestamp() public view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x93a78b5928add6aa178b56fea5e0e9a99334097642d8c50f06bef87f257db102\",\"license\":\"UNLICENSED\"},\"contracts/VesterCliff.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport './Vester.sol';\\n\\ncontract VesterCliff is Vester {\\n    using SafeMath for uint256;\\n\\n    uint256 public immutable vestingCliff;\\n\\n    constructor(\\n        address sonne_,\\n        address recipient_,\\n        uint256 vestingAmount_,\\n        uint256 vestingBegin_,\\n        uint256 vestingEnd_,\\n        uint256 vestingCliff_\\n    ) Vester(sonne_, recipient_, vestingAmount_, vestingBegin_, vestingEnd_) {\\n        require(\\n            vestingCliff_ >= vestingBegin_,\\n            'VesterCliff::constructor: cliff is too early'\\n        );\\n        require(\\n            vestingCliff_ <= vestingEnd_,\\n            'VesterCliff::constructor: cliff is too late'\\n        );\\n        vestingCliff = vestingCliff_;\\n    }\\n\\n    function claim() public virtual override returns (uint256 amount) {\\n        uint256 blockTimestamp = getBlockTimestamp();\\n        if (blockTimestamp < vestingCliff) return 0;\\n\\n        amount = super.claim();\\n    }\\n}\\n\",\"keccak256\":\"0x9f6e6a5a8d9752ceb657a4f874706b442c39a408d3ef4506603d4e41c01a73fc\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IClaimable.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ninterface IClaimable {\\n    function claim() external returns (uint256 amount);\\n\\n    event Claim(address indexed account, uint256 amount);\\n}\\n\",\"keccak256\":\"0xf6f2e486723e732be4d3293aefaeeb7f1c0d4024ced576fe4669900f8459264a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISonne.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\n//IERC20\\ninterface ISonne {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address dst, uint256 rawAmount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x608266b050015738cd697ea74d44c50b5d78994af8f991c0fcf87f981ec2783d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVester.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IVester {\\n    function segments() external view returns (uint256);\\n\\n    function vestingAmount() external view returns (uint256);\\n\\n    function vestingBegin() external view returns (uint256);\\n\\n    function vestingEnd() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xef5f3b1d5da6a23363c2897b657108b3716a9b886a7aa11d180300f451112907\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162000c2438038062000c24833981016040819052620000359162000280565b85858585858181116200008f5760405162461bcd60e51b815260206004820152601560248201527f5665737465723a20454e445f544f4f5f4541524c59000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b03858116608052600080546001600160a01b03191691861691909117905560a083905260c082905260e0819052620000d6670de0b6b3a76400006200019b565b6101005250505050838210159050620001365760405162461bcd60e51b815260206004820152602c602482015260008051602062000c0483398151915260448201526b697320746f6f206561726c7960a01b606482015260840162000086565b818111156200018b5760405162461bcd60e51b815260206004820152602b602482015260008051602062000c0483398151915260448201526a697320746f6f206c61746560a81b606482015260840162000086565b61012052506200036d9350505050565b6000670de0b6b3a7640000815b670de0b6b3a76400008110156200025c57620001cc81662386f26fc10000620002f3565b8410156200021457662386f26fc10000620001e882866200030e565b620001f4908462000328565b6200020091906200034a565b6200020c9084620002f3565b949350505050565b620002208284620002f3565b92506103e862000233836103d062000328565b6200023f91906200034a565b915062000254662386f26fc1000082620002f3565b9050620001a8565b5050919050565b80516001600160a01b03811681146200027b57600080fd5b919050565b60008060008060008060c087890312156200029a57600080fd5b620002a58762000263565b9550620002b56020880162000263565b945060408701519350606087015192506080870151915060a087015190509295509295509295565b634e487b7160e01b600052601160045260246000fd5b60008219821115620003095762000309620002dd565b500190565b600082821015620003235762000323620002dd565b500390565b6000816000190483118215151615620003455762000345620002dd565b500290565b6000826200036857634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e0516101005161012051610802620004026000396000818161022001526102bf01526000818161011201526106340152600081816101870152818161043301526105c70152600081816101f101528181610403015281816105a601526105fc01526000818160d8015261066d0152600081816101c10152818161046e015261052201526108026000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c806384a1931f1161008c578063cf19036011610066578063cf190360146101e3578063e29bc68b146101ec578063e2d6870a14610213578063f3640e741461021b57600080fd5b806384a1931f1461018257806389b1e13f146101a9578063c0c2ae50146101bc57600080fd5b8062728f76146100d3578063062f04291461010d5780633bbed4a0146101345780634e71d92d1461014957806366d003ac14610151578063796b89b91461017c575b600080fd5b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6101476101423660046106c9565b610242565b005b6100fa6102ba565b600054610164906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b426100fa565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6100fa6101b73660046106f2565b6102fb565b6101647f000000000000000000000000000000000000000000000000000000000000000081565b6100fa60015481565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6100fa606481565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146102985760405162461bcd60e51b815260206004820152601460248201527315995cdd195c8e8815539055551213d49256915160621b60448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000427f00000000000000000000000000000000000000000000000000000000000000008110156102ed57600091505090565b6102f56103ae565b91505090565b6000670de0b6b3a7640000815b670de0b6b3a76400008110156103a75761032981662386f26fc10000610721565b84101561036857662386f26fc100006103428286610739565b61034c9084610750565b610356919061076f565b6103609084610721565b949350505050565b6103728284610721565b92506103e8610383836103d0610750565b61038d919061076f565b91506103a0662386f26fc1000082610721565b9050610308565b5050919050565b600080546001600160a01b031633146104005760405162461bcd60e51b815260206004820152601460248201527315995cdd195c8e8815539055551213d49256915160621b604482015260640161028f565b427f000000000000000000000000000000000000000000000000000000000000000081101561043157600091505090565b7f00000000000000000000000000000000000000000000000000000000000000008111156104e8576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e19190610791565b91506104f3565b6104f0610597565b91505b81156105935760005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561056d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059191906107aa565b505b5090565b6000428161062d6101b76105eb7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610739565b610627670de0b6b3a76400006106217f000000000000000000000000000000000000000000000000000000000000000088610739565b9061069e565b906106b1565b90506106927f000000000000000000000000000000000000000000000000000000000000000061062761066b600154856106bd90919063ffffffff16565b7f00000000000000000000000000000000000000000000000000000000000000009061069e565b60019190915592915050565b60006106aa8284610750565b9392505050565b60006106aa828461076f565b60006106aa8284610739565b6000602082840312156106db57600080fd5b81356001600160a01b03811681146106aa57600080fd5b60006020828403121561070457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156107345761073461070b565b500190565b60008282101561074b5761074b61070b565b500390565b600081600019048311821515161561076a5761076a61070b565b500290565b60008261078c57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156107a357600080fd5b5051919050565b6000602082840312156107bc57600080fd5b815180151581146106aa57600080fdfea26469706673582212208cd9e6e7cc231f0c56481432cdb30b0d928ec0811a43fdf562c51a4bfad3711e64736f6c634300080a0033566573746572436c6966663a3a636f6e7374727563746f723a20636c69666620",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c806384a1931f1161008c578063cf19036011610066578063cf190360146101e3578063e29bc68b146101ec578063e2d6870a14610213578063f3640e741461021b57600080fd5b806384a1931f1461018257806389b1e13f146101a9578063c0c2ae50146101bc57600080fd5b8062728f76146100d3578063062f04291461010d5780633bbed4a0146101345780634e71d92d1461014957806366d003ac14610151578063796b89b91461017c575b600080fd5b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6101476101423660046106c9565b610242565b005b6100fa6102ba565b600054610164906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b426100fa565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6100fa6101b73660046106f2565b6102fb565b6101647f000000000000000000000000000000000000000000000000000000000000000081565b6100fa60015481565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6100fa606481565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146102985760405162461bcd60e51b815260206004820152601460248201527315995cdd195c8e8815539055551213d49256915160621b60448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000427f00000000000000000000000000000000000000000000000000000000000000008110156102ed57600091505090565b6102f56103ae565b91505090565b6000670de0b6b3a7640000815b670de0b6b3a76400008110156103a75761032981662386f26fc10000610721565b84101561036857662386f26fc100006103428286610739565b61034c9084610750565b610356919061076f565b6103609084610721565b949350505050565b6103728284610721565b92506103e8610383836103d0610750565b61038d919061076f565b91506103a0662386f26fc1000082610721565b9050610308565b5050919050565b600080546001600160a01b031633146104005760405162461bcd60e51b815260206004820152601460248201527315995cdd195c8e8815539055551213d49256915160621b604482015260640161028f565b427f000000000000000000000000000000000000000000000000000000000000000081101561043157600091505090565b7f00000000000000000000000000000000000000000000000000000000000000008111156104e8576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e19190610791565b91506104f3565b6104f0610597565b91505b81156105935760005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561056d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059191906107aa565b505b5090565b6000428161062d6101b76105eb7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610739565b610627670de0b6b3a76400006106217f000000000000000000000000000000000000000000000000000000000000000088610739565b9061069e565b906106b1565b90506106927f000000000000000000000000000000000000000000000000000000000000000061062761066b600154856106bd90919063ffffffff16565b7f00000000000000000000000000000000000000000000000000000000000000009061069e565b60019190915592915050565b60006106aa8284610750565b9392505050565b60006106aa828461076f565b60006106aa8284610739565b6000602082840312156106db57600080fd5b81356001600160a01b03811681146106aa57600080fd5b60006020828403121561070457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156107345761073461070b565b500190565b60008282101561074b5761074b61070b565b500390565b600081600019048311821515161561076a5761076a61070b565b500290565b60008261078c57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156107a357600080fd5b5051919050565b6000602082840312156107bc57600080fd5b815180151581146106aa57600080fdfea26469706673582212208cd9e6e7cc231f0c56481432cdb30b0d928ec0811a43fdf562c51a4bfad3711e64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2753,
        "contract": "contracts/VesterCliff.sol:VesterCliff",
        "label": "recipient",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2764,
        "contract": "contracts/VesterCliff.sol:VesterCliff",
        "label": "previousPoint",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}