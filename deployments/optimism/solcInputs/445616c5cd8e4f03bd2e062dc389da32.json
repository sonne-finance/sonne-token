{
  "language": "Solidity",
  "sources": {
    "contracts/VesterSale.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\n\nimport './Vester.sol';\n\ncontract VesterSale is Vester {\n    using SafeMath for uint256;\n\n    constructor(\n        address sonne_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_\n    ) Vester(sonne_, recipient_, vestingAmount_, vestingBegin_, vestingEnd_) {}\n\n    function getUnlockedAmount()\n        internal\n        virtual\n        override\n        returns (uint256 amount)\n    {\n        uint256 blockTimestamp = getBlockTimestamp();\n        uint256 currentPoint = vestingCurve(\n            (blockTimestamp - vestingBegin).mul(1e18).div(\n                vestingEnd - vestingBegin\n            )\n        );\n        amount = vestingAmount\n            .mul(currentPoint.sub(previousPoint))\n            .div(finalPoint)\n            .mul(5)\n            .div(10);\n        if (previousPoint == 0 && currentPoint > 0) {\n            // distribute 50% on TGE\n            amount = amount.add(vestingAmount.div(2));\n        }\n        previousPoint = currentPoint;\n    }\n}\n"
    },
    "contracts/Vester.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\n\nimport './interfaces/ISonne.sol';\nimport './interfaces/IClaimable.sol';\nimport './interfaces/IVester.sol';\n\ncontract Vester is IVester, IClaimable {\n    using SafeMath for uint256;\n\n    uint256 public constant override segments = 100;\n\n    address public immutable sonne;\n    address public recipient;\n\n    uint256 public immutable override vestingAmount;\n    uint256 public immutable override vestingBegin;\n    uint256 public immutable override vestingEnd;\n\n    uint256 public previousPoint;\n    uint256 public immutable finalPoint;\n\n    constructor(\n        address sonne_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_\n    ) {\n        require(vestingEnd_ > vestingBegin_, 'Vester: END_TOO_EARLY');\n\n        sonne = sonne_;\n        recipient = recipient_;\n\n        vestingAmount = vestingAmount_;\n        vestingBegin = vestingBegin_;\n        vestingEnd = vestingEnd_;\n\n        finalPoint = vestingCurve(1e18);\n    }\n\n    function vestingCurve(uint256 x) public pure virtual returns (uint256 y) {\n        uint256 speed = 1e18;\n        for (uint256 i = 0; i < 100e16; i += 1e16) {\n            if (x < i + 1e16) return y + (speed * (x - i)) / 1e16;\n            y += speed;\n            speed = (speed * 976) / 1000;\n        }\n    }\n\n    function getUnlockedAmount() internal virtual returns (uint256 amount) {\n        uint256 blockTimestamp = getBlockTimestamp();\n        uint256 currentPoint = vestingCurve((blockTimestamp - vestingBegin).mul(1e18).div(vestingEnd - vestingBegin));\n        amount = vestingAmount.mul(currentPoint.sub(previousPoint)).div(finalPoint);\n        previousPoint = currentPoint;\n    }\n\n    function claim() public virtual override returns (uint256 amount) {\n        require(msg.sender == recipient, 'Vester: UNAUTHORIZED');\n        uint256 blockTimestamp = getBlockTimestamp();\n        if (blockTimestamp < vestingBegin) return 0;\n        if (blockTimestamp > vestingEnd) {\n            amount = ISonne(sonne).balanceOf(address(this));\n        } else {\n            amount = getUnlockedAmount();\n        }\n        if (amount > 0) ISonne(sonne).transfer(recipient, amount);\n    }\n\n    function setRecipient(address recipient_) public virtual {\n        require(msg.sender == recipient, 'Vester: UNAUTHORIZED');\n        recipient = recipient_;\n    }\n\n    function getBlockTimestamp() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISonne.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\n//IERC20\ninterface ISonne {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address dst, uint256 rawAmount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IClaimable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface IClaimable {\n    function claim() external returns (uint256 amount);\n\n    event Claim(address indexed account, uint256 amount);\n}\n"
    },
    "contracts/interfaces/IVester.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IVester {\n    function segments() external view returns (uint256);\n\n    function vestingAmount() external view returns (uint256);\n\n    function vestingBegin() external view returns (uint256);\n\n    function vestingEnd() external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}